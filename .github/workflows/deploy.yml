name: Deploy Deepseek Model R1  

on:  
  push:  
    branches:  
      - main  
  workflow_dispatch:  

jobs:  
  deploy:  
    runs-on: ubuntu-latest  
    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v3  
        
      - name: Setup Terraform  
        uses: hashicorp/setup-terraform@v2  
        with:  
          terraform_version: latest
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: checking terraform version
        run: terraform version

      - name: Terraform init  
        run: cd Terraform && terraform init  

      - name: Terraform destroy  
        run: cd Terraform && terraform destroy --auto-approve  
        env:  
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Initialize fresh terraform
        run: cd Terraform && terraform init
        
      - name: Terraform Validate  
        run: cd Terraform && terraform validate  
        
      - name: Terraform plan  
        id: plan
        run: |
          cd Terraform && terraform plan -no-color -input=false -out=tfplan
          echo "changes=$(terraform show -no-color tfplan | grep -q 'No changes.' && echo 'false' || echo 'true')" >> $GITHUB_OUTPUT  
        env:  
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  

      - name: Terraform Apply  
        run: cd Terraform && terraform apply --auto-approve
        if: steps.plan.outputs.changes == 'true' 
        env:  
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  

      - name: Upload SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deepseek-key
          chmod 600 ~/.ssh/deepseek-key

      - name: Wait for EC2 Instance to Initialize
        run: sleep 60  # Wait for 60 seconds

      - name: Get Public IP
        id: get_ip
        run: echo "public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

      - name: Verify EC2 Instance
        run: |
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          if [[ -z "$INSTANCE_IP" || "$INSTANCE_IP" == "No public IP available" ]]; then  
              echo "EC2 instance is not running or does not have a public IP."  
              exit 1  
          else
              echo "EC2 instance is running with public IP: $INSTANCE_IP"
          fi

      - name: Deploy DeepSeek Model R1
        run: |
          set -x
          # Get the public IP of the EC2 instance
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          if [[ -z "$INSTANCE_IP" || "$INSTANCE_IP" == "No public IP available" ]]; then  
              echo "No public IP found for the instance."  
              exit 1  
          fi
      
          # SSH into the instance and run Docker commands
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deepseek-key ubuntu@$(terraform output -raw instance_public_ip) << 'EOF'
          set -x 
          sudo docker pull ghcr.io/open-webui/open-webui:main
          sudo docker run -d -p 9793:8080 -v open-webui:/app/backend/data --name deepseek-model ghcr.io/open-webui/open-webui:main
          sudo curl -fsSL https://ollama.com/install.sh 
          EOF
        env:  
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  

      - name: Get Load Balancer DNS name  
        run: |  
          ALB_DNS=$(terraform output -raw alb_dns_name)  
          echo "Deepseek Model R1 is accessible at: http://$ALB_DNS" 

      - name: Print Terraform Outputs
        run: terraform output

  cleanup:  
    runs-on: ubuntu-latest  
    needs: deploy  
    if: ${{ github.event_name == 'workflow_dispatch' }}  
    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v3  
        
      - name: Setup Terraform  
        uses: hashicorp/setup-terraform@v2  
        with:  
          terraform_version: "1.5.0"  
      
      - name: Terraform init 
        run: cd Terraform && terraform init 

      - name: Terraform destroy  
        run: cd Terraform && terraform destroy --auto-approve  
        env:  
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  